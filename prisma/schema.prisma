// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}




model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}



model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}



model User {
    // Important
    id            String      @id @default(cuid())
    username      String      @unique @default(cuid())
    email         String?     @unique
    name          String?
    image         String?
    contactEmail  String?

    // misc
    createdAt     DateTime    @default(now())
    emailVerified DateTime?

    // Links
    github          String?
    linkedin        String?
    personal        String?
    link1           String?
    link2           String?
    link3           String?

    // About?
    about           String?
    bio             String?
    location        String?
    occupation      String?

    // Relationships
    accounts      Account[]
    sessions      Session[]

    followers     Follows[]   @relation("following")
    following     Follows[]   @relation("follower")

    projects      Project[]       
    likes         Like[]    
    comments      Comment[] 
    tags          Tag[]
}




model Follows {
  createdAt     DateTime    @default(now())

  followerId  String
  followingId String
  
  follower    User @relation("follower", fields: [followerId], references: [id])
  following   User @relation("following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}





model Project {
  id                String    @id @default(cuid())

  name              String
  description       String?     // Markdown description
  readme            String?     // Markdown description
  private           Boolean
  status            String     // True if active, False if in-progress
  createdAt         DateTime    @default(now())
  feature           Boolean     @default(false)     // Feature on 'Profile' page + bring to front on 'Projects' page

  link              String?
  githubLink        String?

  tags          Tag[]       // One-to-many relation with Tag
  likes         Like[]      // One-to-many relation with Like
  comments      Comment[]   // One-to-many relation with Comment
  images        Image[]

  userId        String
  user          User        @relation(fields: [userId], references: [id])
}



model Image {
    id              String    @id @default(cuid())
    url             String

    projectId       String?     // Nullable foreign key
    project         Project? @relation(fields: [projectId], references: [id])

    // userId          String?     // Nullable foreign key
    // user            User?    @relation(fields: [userId], references: [id])
}

model Tag {
  id            String      @id @default(cuid())
  name          String

  projectId     String
  userId        String
  project       Project  @relation(fields: [projectId], references: [id])
  user          User  @relation(fields: [userId], references: [id])
}





model Like {
  id        String     @id @default(cuid())
  createdAt     DateTime    @default(now())

  userId    String
  projectId String

  user      User    @relation(fields: [userId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
}






model Comment {
  id            String     @id @default(cuid())
  content       String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  userId        String
  projectId     String

  user          User    @relation(fields: [userId], references: [id])
  project       Project @relation(fields: [projectId], references: [id])
}


